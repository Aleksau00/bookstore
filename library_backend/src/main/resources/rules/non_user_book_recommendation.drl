package rules;
import com.sbnz.sbnz.model.*;
import java.util.Date;
import java.util.ArrayList;
import java.util.List;
import java.util.Collections;

rule "Insert Books"
when
    $bookList: List()
    $book: Book() from $bookList
then
    insert($book);
end

rule "New Book - Added in the Last Month"
when
    $book: Book(addDate >= (new Date() - 30))
then
    $book.setRecommendation("New Book");
end

rule "New Book - Published in the Last Six Months"
when
    $book: Book(publishDate >= (new Date() - 180))
then
    $book.setRecommendation("New Book");
end

rule "Popular Book - Has 20 or More Ratings"
when
    $book: Book(ratings.size() >= 20)
then
    $book.setRecommendation("Popular Book");
end

rule "Popular Book - New and Has 10 or More Ratings"
when
    $book: Book(ratings.size() >= 10, addDate >= (new Date() - 30))
then
    $book.setRecommendation("Popular Book");
end

rule "Well-Rated Book - Average Rating 4 or Higher"
when
    $book: Book(ratings != null, $rating: Rating() from $book.getRatings(), accumulate($rating; $avg: average($rating.getValue()), $avg >= 4))
then
    $book.setRecommendation("Well-Rated Book");
end

rule "Poorly Rated Book - Average Rating 2.5 or Lower"
when
    $book: Book(ratings != null, $rating: Rating() from $book.getRatings(), accumulate($rating; $avg: average($rating.getValue()), $avg <= 2.5))
then
    $book.setRecommendation("Poorly Rated Book");
end

rule "Neutral Book - Average Rating Between 2.5 and 4 or No Ratings Yet"
when
    $book: Book(ratings != null, $rating: Rating() from $book.getRatings(), $avg: average($rating.getValue()), ($avg >= 2.5 && $avg < 4) || $book.getRatings().isEmpty())
then
    $book.setRecommendation("Neutral Book");
end

rule "Recommend Popular and Well-Rated Books"
when
    $book: Book(recommendation == "Popular Book", ratings != null, $rating: Rating() from $book.getRatings(), accumulate($rating; $avg: average($rating.getValue()), $avg >= 4 || ($avg >= 2.5 && $avg < 4)))
then
    $book.setRecommended(true);
end

rule "Recommend New Books"
when
    $book: Book(recommendation == "New Book")
then
    $book.setRecommended(true);
end

rule "Remove Poorly Rated Books if More Than 10 Recommendations"
when
    $book: Book(recommended == true, recommendation != "Poorly Rated Book")
    $count: Number(intValue > 10) from accumulate(
        $b: Book(recommended == true, recommendation == "Poorly Rated Book"),
        count($b)
    )
then
    $book.setRecommended(false);
end

rule "Randomly Select 10 Recommendations"
when
    $bookList: List(size > 10) from accumulate(
        $book: Book(recommended == true),
        collectList($book)
    )
then
    List<Book> randomBooks = new ArrayList<>($bookList);
    Collections.shuffle(randomBooks);
    for (int i = 10; i < randomBooks.size(); i++) {
        Book randomBook = randomBooks.get(i);
        if (randomBook.isRecommended()) {
            randomBook.setRecommended(false);
        }
    }
end

